@page "/JellyClickerGame"
@using BlazorJellyClicker.Client.Data;
@using BlazorJellyClicker.Client.Helpers;
@using BlazorJellyClicker.Shared.Data;
@using BlazorJellyClicker.Shared.Models;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.Extensions.Configuration
@using Blazored.LocalStorage;
@using System.Text.Json;
@using System.Text;
@inject IConfiguration Configuration
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<div class="jelly-page-header-bar">
	<h1 class="jelly-page-header">Jelly Clicker</h1>
	<div class="state-modal-btns">
		<AuthorizeView>
			<Authorized>
				<BlazorJellyClicker.Client.Pages.LoadModal @ref="LoadModal" OnDoneCallback="LoadStateCallback"></BlazorJellyClicker.Client.Pages.LoadModal>
				<BlazorJellyClicker.Client.Pages.SaveModal @ref="SaveModal" OnDoneCallback="SaveState"></BlazorJellyClicker.Client.Pages.SaveModal>
				<button @onclick="() => OpenSaveModal()">Save Game</button>
				<button @onclick="() => OpenLoadModal()">Load Game</button>
			</Authorized>
		</AuthorizeView>
		<BlazorJellyClicker.Client.Pages.ExportModal @ref="ExportModal"></BlazorJellyClicker.Client.Pages.ExportModal>
		<BlazorJellyClicker.Client.Pages.ImportModal @ref="ImportModal" OnDoneCallback="ImportGame"></BlazorJellyClicker.Client.Pages.ImportModal>
		<button @onclick="() => OpenExportModal()">Export Game</button>
		<button @onclick="() => OpenImportModal()">Import Game</button>
	</div>
</div>
<div class="game-board">
	<div class="col-lg-4 col-md-6 order-lg-first game-board-col">
		<div class="jelly-shop-container">
			@foreach (var j in _jellies)
			{
				<div class="jelly-shop-card">
					<div class="jelly-shop-card-header">@j.Name: @j.Count</div>
					<div class="jelly-shop-card-details" @onclick="@(() => BuyJelly(j.Cost, j.BaseIncome, j.Name, j.IncomeMulti))" @onmouseover="@(() => UpdateJellyTooltipContainer(j))">
						<div class="jelly-shop-card-left">
							<div class="jelly-shop-card-content">Cost: @FormatNumber(RoundUp(j.Cost))</div>
							<div class="jelly-shop-card-content">+@FormatNumber(RoundDown(j.BaseIncome * j.IncomeMulti * globalIncomeMulti)) Jellies/sec</div>
							<div class="jelly-shop-card-content">Generating: @FormatNumber(RoundDown(j.Income * globalIncomeMulti)) Jellies/sec</div>
						</div>
						<div class="jelly-shop-card-right">
							<img src="@j.ImageSrc" />
						</div>
					</div>
					<div class="jelly-shop-card-btns">
						<button @onclick="(() => BuyJellyBaseUpgrade(j))" @onmouseover="(() => UpdateUpgradeTooltipContainer(j.BaseUpgrades.Cast<Upgrade>().ToList()))">Base+</button>
						<button @onclick="(() => BuyJellyMultiUpgrade(j))" @onmouseover="(() => UpdateUpgradeTooltipContainer(j.MultiUpgrades.Cast<Upgrade>().ToList()))">Multi+</button>
					</div>
				</div>
			}
		</div>
	</div>
	<div class="col-lg-4 col-md-12 order-md-first game-board-col">
		<div class="shop-tooltip-container">
			<h4>@shopTooltip.shopTooltipName</h4>
			<div class="shop-tooltip-flex">
				<div class="shop-tooltip-left-col">
					<p>@shopTooltip.shopTooltipDesc</p>
					<p>@shopTooltip.shopTooltipCost</p>
				</div>
				<div class="shop-tooltip-right-col">
					<img src="@shopTooltip.imageSrc" />
				</div>
			</div>
		</div>
		<div class="jelly-click-padding">
			<div class="jelly-click-container">
				<img src="/Images/Jelly.jpg" asp-append-version="true" @onclick="@(() => PlayerClicked())" class="@JellyClickClass" @onmouseover="JellyClickMouseOver" @onmouseout="JellyClickMouseOut" @onmousedown="JellyClickMouseDown" @onmouseup="JellyClickMouseUp" />
			</div>
		</div>
	</div>
	<div class="col-lg-4 col-md-6 game-board-col">
		<div class="stats-container">
			<h4>Stats</h4>
			<p>Jellies: @FormatNumber(RoundDown(currency))</p>
			<p>Income: @FormatNumber(RoundDown(income * globalIncomeMulti))</p>
			<p>Click Power: @(clickPower * globalClickMulti)</p>
		</div>
		<div class="upgrades-container">
			<h4>Upgrades</h4>
			@foreach (var u in _clickPowerUpgrades)
			{
				@if (!u.Purchased)
				{
					<div class="upgrades-card" @onclick="@(() => BuyClickPowerUpgrade(u))">
						<div class="jelly-shop-card-header">@u.Name</div>
						<div class="jelly-shop-card-content">Cost: @FormatNumber(u.Cost)</div>
						<div class="jelly-shop-card-content">@u.Description</div>
					</div>
				}
			}
			@foreach (var u in _clickMultiUpgrades)
			{
				@if (!u.Purchased)
				{
					<div class="upgrades-card" @onclick="@(() => BuyClickMultiUpgrade(u))">
						<div class="jelly-shop-card-header">@u.Name</div>
						<div class="jelly-shop-card-content">Cost: @FormatNumber(u.Cost)</div>
						<div class="jelly-shop-card-content">@u.Description</div>
					</div>
				}
			}
			@foreach (var u in _incomeMultiUpgrades)
			{
				@if (!u.Purchased)
				{
					<div class="upgrades-card" @onclick="@(() => BuyIncomeMultiUpgrade(u))">
						<div class="jelly-shop-card-header">@u.Name</div>
						<div class="jelly-shop-card-content">Cost: @FormatNumber(u.Cost)</div>
						<div class="jelly-shop-card-content">@u.Description</div>
					</div>
				}
			}
		</div>
	</div>
</div>


@code {

	private BlazorJellyClicker.Client.Pages.LoadModal LoadModal { get; set; } = new();
	private BlazorJellyClicker.Client.Pages.SaveModal SaveModal { get; set; } = new();
	private BlazorJellyClicker.Client.Pages.ExportModal ExportModal { get; set; } = new();
	private BlazorJellyClicker.Client.Pages.ImportModal ImportModal { get; set; } = new();
	private int tick = 0;
	private double currency = 0;
	private double income = 0;
	private double clickPower = 0;
	private double globalClickMulti = 1;
	private double globalIncomeMulti = 1;
	private List<Jelly> _jellies = new();
	private List<BaseUpgrade> _clickPowerUpgrades = new();
	private List<MultiUpgrade> _clickMultiUpgrades = new();
	private List<MultiUpgrade> _incomeMultiUpgrades = new();
	private ShopTooltip shopTooltip = new();

	string JellyClickClass { get; set; }
	void JellyClickMouseOver(MouseEventArgs e) { JellyClickClass = "jelly-click-grow"; }
	void JellyClickMouseOut(MouseEventArgs e) { JellyClickClass = ""; }
	void JellyClickMouseDown(MouseEventArgs e) { JellyClickClass = "jelly-click-shrink"; }
	void JellyClickMouseUp(MouseEventArgs e) { JellyClickClass = "jelly-click-grow"; }

	protected override async Task OnInitializedAsync()
	{
		if (await LocalStorage.ContainKeyAsync("localSave"))
		{
			LoadStateFromLocalStorage();
		}
		else
		{
			await FreshGameState();
		}
		var timer = new PeriodicTimer(TimeSpan.FromSeconds(1));
		while (await timer.WaitForNextTickAsync())
		{
			IncrementScore();
			StateHasChanged();
			tick++;
			if(tick > 300)
			{
				SaveStateToLocalStorage();
				tick = 0;
			}
		}
	}

	private void UpdateJellyTooltipContainer(Jelly j)
	{
		shopTooltip.shopTooltipDesc = j.Description;
		shopTooltip.shopTooltipName = j.Name;
		shopTooltip.shopTooltipCost = "Cost: " + @FormatNumber(RoundUp(j.Cost));
		shopTooltip.imageSrc = "/Images/JellyImg.jpg";
	}

	private void UpdateUpgradeTooltipContainer(List<Upgrade> u)
	{
		var upgrades = u.OrderBy(i => i.Id);
		var nextUpgrade = upgrades.Where(i => !i.Purchased).FirstOrDefault();
		if(nextUpgrade == null)
		{
			shopTooltip.shopTooltipName = "MAXED";
			shopTooltip.shopTooltipDesc = "No more upgrades of this type!";
			shopTooltip.shopTooltipCost = "";
		} else
		{
			shopTooltip.shopTooltipName = nextUpgrade.Name;
			shopTooltip.shopTooltipDesc = nextUpgrade.Description;
			shopTooltip.shopTooltipCost = "Cost: " + @FormatNumber(nextUpgrade.Cost);
		}
	}

	private void PlayerClicked()
	{
		currency += (clickPower * globalClickMulti);
	}

	private void BuyJelly(double cost, double inc, string name, double multi)
	{
		if (currency >= cost)
		{
			var jellyToBuy = _jellies.Where(i => i.Name == name).FirstOrDefault();
			if (jellyToBuy != null)
			{
				jellyToBuy.Count++;
				jellyToBuy.Cost = cost * 1.15;
				jellyToBuy.Income += (inc * multi);
				currency -= cost;
				income += (inc * multi);
			}
		}
	}

	private void BuyJellyBaseUpgrade(Jelly jelly)
	{
		var upgrades = jelly.BaseUpgrades.OrderBy(i => i.Id);
		var nextUpgrade = upgrades.Where(i => !i.Purchased).FirstOrDefault();
		if(nextUpgrade != null && currency > nextUpgrade.Cost)
		{
			currency -= nextUpgrade.Cost;
			nextUpgrade.Purchased = true;
			jelly.BaseIncome += nextUpgrade.BaseIncrease;
			// Recalculate income
			income -= jelly.Income;
			jelly.Income = (jelly.BaseIncome * jelly.Count) * jelly.IncomeMulti;
			income += jelly.Income;
		}
	}

	private void BuyJellyMultiUpgrade(Jelly jelly)
	{
		var upgrades = jelly.MultiUpgrades.OrderBy(i => i.Id);
		var nextUpgrade = upgrades.Where(i => !i.Purchased).FirstOrDefault();
		if (nextUpgrade != null && currency > nextUpgrade.Cost)
		{
			currency -= nextUpgrade.Cost;
			nextUpgrade.Purchased = true;
			jelly.IncomeMulti += nextUpgrade.Multi;
			// Recalculate income
			income -= jelly.Income;
			jelly.Income = (jelly.BaseIncome * jelly.Count) * jelly.IncomeMulti;
			income += jelly.Income;
		}
	}

	private void BuyClickPowerUpgrade(BaseUpgrade upgrade)
	{
		if(currency >= upgrade.Cost)
		{
			currency -= upgrade.Cost;
			clickPower += upgrade.BaseIncrease;
			upgrade.Purchased = true;
		}
	}

	private void BuyClickMultiUpgrade(MultiUpgrade upgrade)
	{
		if(currency >= upgrade.Cost)
		{
			currency -= upgrade.Cost;
			globalClickMulti += upgrade.Multi;
			upgrade.Purchased = true;
		}
	}

	private void BuyIncomeMultiUpgrade(MultiUpgrade upgrade)
	{
		if (currency >= upgrade.Cost)
		{
			currency -= upgrade.Cost;
			globalIncomeMulti += upgrade.Multi;
			upgrade.Purchased = true;
		}
	}

	private void IncrementScore()
	{
		currency += (income * globalIncomeMulti);
	}

	private async Task<List<Jelly>> SetJellies()
	{
		var jellyData = await Http.GetFromJsonAsync<Jelly[]>("jellydata.json");
		List<Jelly> jellies = new();
		if (jellyData != null)
		{

			foreach (var item in jellyData)
			{
				jellies.Add(new Jelly()
					{
						JellyId = item.JellyId,
						Name = item.Name,
						Description = item.Description,
						BaseCost = item.BaseCost,
						BaseIncome = item.BaseIncome,
						Cost = item.BaseCost,
						Income = 0,
						IncomeMulti = 1,
						Count = 0,
						MultiUpgrades = item.MultiUpgrades,
						BaseUpgrades = item.BaseUpgrades,
						ImageSrc = "/Images/JellyImg.jpg"
					});
			}
		}
		return jellies;
	}

	private async Task SetGlobalUpgrades()
	{
		_clickPowerUpgrades = await Http.GetFromJsonAsync<List<BaseUpgrade>>("clickpowerupgrades.json");
		_clickMultiUpgrades = await Http.GetFromJsonAsync<List<MultiUpgrade>>("clickmultiupgrades.json");
		_incomeMultiUpgrades = await Http.GetFromJsonAsync<List<MultiUpgrade>>("incomemultiupgrades.json");
	}

	private async void OpenSaveModal()
	{
		var states = await Http.GetFromJsonAsync<List<GameState>>($"api/JellyClicker/GetStates");
		if (states != null)
		{
			SaveModal.Open(states);
		} else
		{
			await JsRuntime.InvokeVoidAsync("alert", "Could not retrieve existing saved data.");
		}
	}

	private async void SaveStateToLocalStorage()
	{
		var stateBase64 = ConvertSavedStateToBase64String();
		await LocalStorage.SetItemAsStringAsync("localSave", stateBase64);
	}

	private string ConvertSavedStateToBase64String()
	{
		List<JellyState> jellyStates = new List<JellyState>();
		foreach (var jelly in _jellies)
		{
			jellyStates.Add(new JellyState
			{
				JellyId = jelly.JellyId,
				Count = jelly.Count,
				BaseUpgrades = (from j in jelly.BaseUpgrades
								select new UpgradeState() { Id = j.Id, Purchased = j.Purchased }).ToList(),
				MultiUpgrades = (from j in jelly.MultiUpgrades
									select new UpgradeState() { Id = j.Id, Purchased = j.Purchased }).ToList()
			});
		};

		SavedState savedState = new SavedState()
		{
			Jellies = jellyStates,
			ClickMultiUpgrades = (from u in _clickMultiUpgrades
									select new UpgradeState() { Id = u.Id, Purchased = u.Purchased }).ToList(),
			ClickPowerUpgrades = (from u in _clickPowerUpgrades
									select new UpgradeState() { Id = u.Id, Purchased = u.Purchased }).ToList(),
			IncomeMultiUpgrades = (from u in _incomeMultiUpgrades
									select new UpgradeState() { Id = u.Id, Purchased = u.Purchased }).ToList(),
			Currency = currency
		};

		var stateBase64 = Convert.ToBase64String(Encoding.UTF8.GetBytes(JsonSerializer.Serialize(savedState)));
		return stateBase64;
	}

	private async void SaveState(SaveCallbackArgs args)
	{
		if(args.StateId < 0)
		{
			NewSave(args.Name);
		} else
		{
			var gameState = new GameStateDto()
				{
					Id = args.StateId,
					StateName = args.Name,
					Jellies = _jellies,
					Currency = currency,
					ClickPowerUpgrades = _clickPowerUpgrades,
					ClickMultiUpgrades = _clickMultiUpgrades,
					IncomeMultiUpgrades = _incomeMultiUpgrades,
				};
			await Http.PostAsJsonAsync("api/JellyClicker/SaveState", gameState);
		};
	}

	private async void NewSave(string name)
	{
		var gameState = new GameStateDto()
			{
				StateName = name,
				Jellies = _jellies,
				Currency = currency,
				ClickPowerUpgrades = _clickPowerUpgrades,
				ClickMultiUpgrades = _clickMultiUpgrades,
				IncomeMultiUpgrades = _incomeMultiUpgrades,
			};

		var asJson = JsonSerializer.Serialize(gameState);
		await Http.PostAsJsonAsync("api/JellyClicker/NewSave", gameState);
	}

	private async void OpenImportModal()
	{
		ImportModal.Open();
	}

	private async void OpenExportModal()
	{
		var stateBase64 = ConvertSavedStateToBase64String();
		if (stateBase64 != null)
		{
			ExportModal.Open(stateBase64);
		}
		else
		{
			await JsRuntime.InvokeVoidAsync("alert", "Could not retrieving existing saved data.");
		}
	}

	private async void OpenLoadModal()
	{
		var states = await Http.GetFromJsonAsync<List<GameState>>($"api/JellyClicker/GetStates");
		if (states != null)
		{
			LoadModal.Open(states);
		}
		else
		{
			await JsRuntime.InvokeVoidAsync("alert", "Could not retrieve existing saved data.");
		}
	}

	public async void ImportGame(string importState)
	{
		var savedState = JsonSerializer.Deserialize<SavedState>(Encoding.UTF8.GetString(Convert.FromBase64String(importState)));
		if (savedState != null)
		{
			LoadState(savedState);
		} else
		{
			await JsRuntime.InvokeVoidAsync("alert", "Could not retrieve saved data.");
		}
	}

	public async void LoadStateCallback(int stateId)
	{
		var savedState = await Http.GetFromJsonAsync<SavedState>($"api/JellyClicker/LoadState/{stateId}");
		if (savedState != null)
		{
			LoadState(savedState);
		}
		else
		{
			await JsRuntime.InvokeVoidAsync("alert", "Could not retrieve saved data.");
		}
	}

	public async void LoadStateFromLocalStorage()
	{
		var savedState = JsonSerializer.Deserialize<SavedState>(Encoding.UTF8.GetString(Convert.FromBase64String(await LocalStorage.GetItemAsStringAsync("localSave"))));
		if (savedState != null)
		{
			LoadState(savedState);
		}
		else
		{
			await JsRuntime.InvokeVoidAsync("alert", "Could not retrieve saved data.");
		}
	}

	public async void LoadState(SavedState stateData)
	{
		if(stateData == null)
		{
			return;
		}

		await FreshGameState();
		// Load saved game state over the fresh state
		currency = stateData.Currency;
		// Load global upgrades
		foreach(var up in _clickPowerUpgrades)
		{
			foreach(var savedUp in stateData.ClickPowerUpgrades)
			{
				if(savedUp.Purchased && up.Id == savedUp.Id)
				{
					up.Purchased = savedUp.Purchased;
					clickPower += up.BaseIncrease;
				}
			}
		}
		foreach (var up in _clickMultiUpgrades)
		{
			foreach (var savedUp in stateData.ClickMultiUpgrades)
			{
				if (savedUp.Purchased && up.Id == savedUp.Id)
				{
					up.Purchased = savedUp.Purchased;
					globalClickMulti += up.Multi;
				}
			}
		}
		foreach (var up in _incomeMultiUpgrades)
		{
			foreach (var savedUp in stateData.IncomeMultiUpgrades)
			{
				if (savedUp.Purchased && up.Id == savedUp.Id)
				{
					up.Purchased = savedUp.Purchased;
					globalIncomeMulti += up.Multi;
				}
			}
		}
		// Load Jellies and their local upgrades
		foreach(var item in _jellies)
		{
			foreach(var savedItem in stateData.Jellies)
			{
				if(item.JellyId == savedItem.JellyId && savedItem.Count > 0)
				{
					foreach (var up in item.BaseUpgrades)
					{
						foreach (var savedUp in savedItem.BaseUpgrades)
						{
							if (savedUp.Purchased && savedUp.Id == up.Id)
							{
								up.Purchased = true;
								item.BaseIncome += up.BaseIncrease;
							}
						}
					}
					foreach(var up in item.MultiUpgrades)
					{
						foreach(var savedUp in savedItem.MultiUpgrades)
						{
							if(savedUp.Purchased && savedUp.Id == up.Id)
							{
								up.Purchased = true;
								item.IncomeMulti += up.Multi;
							}
						}
					}
					item.Count = savedItem.Count;
					item.Cost = item.BaseCost * (Math.Pow(1.15, item.Count));
					item.Income = item.BaseIncome * item.Count * item.IncomeMulti;
					income += item.Income;
				}
			}
		}
	}

	private async Task FreshGameState()
	{
		currency = 0;
		income = 0;
		globalClickMulti = 1;
		globalIncomeMulti = 1;
		clickPower = 1;
		_jellies = await SetJellies();
		await SetGlobalUpgrades();
	}

	private double RoundUp(double num)
	{
		return num < 10 ? Math.Round(num, 1) : Math.Ceiling(num);
	}

	private double RoundDown(double num)
	{
		return num < 10 ? Math.Round(num, 1) : Math.Floor(num);
	}

	private string FormatNumber(double n)
	{
		if (n < 1000)
			return n.ToString();

		if (n < 10000)
			return String.Format("{0:#,.##}K", n - 5);

		if (n < 100000)
			return String.Format("{0:#,.#}K", n - 50);

		if (n < 1000000)
			return String.Format("{0:#,.}K", n - 500);

		if (n < 10000000)
			return String.Format("{0:#,,.##}M", n - 5000);

		if (n < 100000000)
			return String.Format("{0:#,,.#}M", n - 50000);

		if (n < 1000000000)
			return String.Format("{0:#,,.}M", n - 500000);

		if (n < 10000000000)
			return String.Format("{0:#,,,.}B", n - 5000000);

		if (n < 100000000000)
			return String.Format("{0:#,,,.}B", n - 50000000);

		if (n < 1000000000000)
			return String.Format("{0:#,,,.}B", n - 500000000);

		if (n < 10000000000000)
			return String.Format("{0:#,,,,.}T", n - 5000000000);

		if (n < 100000000000000)
			return String.Format("{0:#,,,,.}T", n - 50000000000);

		if (n < 1000000000000000)
			return String.Format("{0:#,,,,.}T", n - 500000000000);

		if (n < 10000000000000000)
			return String.Format("{0:#,,,,,.}Quad", n - 5000000000000);

		if (n < 100000000000000000)
			return String.Format("{0:#,,,,,.}Quad", n - 50000000000000);

		if (n < 1000000000000000000)
			return String.Format("{0:#,,,,,.}Quad", n - 500000000000000);
		//This as large as we can format to on a double
		return String.Format("{0:#,,,,,,.}Quint", n - 5000000000000000);
	}
}