@inject IJSRuntime JsRuntime

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Import</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="block">
                <p>Please paste your code below.</p>
                <textarea class="import-export-textarea" type="text" placeholder="Paste here" @bind="_savedState" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Import()">Import</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Cancel</button>
            </div>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
        <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public EventCallback<string> OnDoneCallback { get; set; }
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    [Parameter]public string _savedState { get; set; } = "";

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    public async void Import()
    {
        await InvokeAsync(() => OnDoneCallback.InvokeAsync(_savedState));
        Close();
    }
}
