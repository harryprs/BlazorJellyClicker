@using BlazorJellyClicker.Shared.Models;
@inject IJSRuntime JsRuntime

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Load Game</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @foreach(GameState state in _states)
                {
                    <div class="state-container">
                        <p class="state-container-title">@state.StateName</p>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Load(state)">Load</button>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Cancel</button>
            </div>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
        <div class="modal-backdrop fade show"></div>
}


@code {
    [Parameter] public EventCallback<int> OnDoneCallback { get; set; }
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    public List<GameState> _states = new List<GameState>();

    public void Open(List<GameState> states)
    {
        _states = states;
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    public async void Load(GameState state)
    {
        if (await LoadConfirm(state.StateName))
        {
            await InvokeAsync(() => OnDoneCallback.InvokeAsync(state.Id));
        }
        Close();
    }

    public async Task<bool> LoadConfirm(string name)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to load {name}? Any current progress will be lost.");
        if (confirmed)
        {
            return true;
        }
        return false;
    }
}